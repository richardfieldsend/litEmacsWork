* Config.org: A configuration file for Emacs.
** Introduction.

When I first began to use Linux in anger a little over 20 years ago on
of my earliest experiences was with a piece of software called Vi.
Back then the installation process of Redhat Linux was long and
largely manual, especially when it came to things like partitioning
the hard drive.  When you got to the point where you actually started
installing you were given a very, very long list of the available
programs.  These were grouped into the type of software they were, so
text editors were together, graphics programs etc. As I was very much
in the dark at this stage for some of the options I selected 'install
everything' because I would then have the freedom to experiment.  It
is worth remembering that this is a long time before I got a network
connection at home, so if I installed programs it had to be from the
stack of CDs that had come in the box.

Anyway, I finished my first installation and began to prod around the
shiny new operating system.  I had cut my teeth of a Sinclair ZX
Spectrum, BBC Micros, Dec mainframes and DOS, so the command line
wasn't completely alien, but it was still a challenging place to be.

I started trying to work out how to configure this strange new beast,
and had my first contact with Vi. I decided to create a text file and
I believe I typed something like:

vi filename.txt

As the filename didn't exist I was placed in a screen with the cursor
at the top, and a column of tilde characters (~) on the left hand
edge. At this stage I expected, in common with every single other text
editing program that I had ever met that if I typed something it would
appear on the screen.  This was not the case. I would type, but
nothing happened.

And again, a reminder. This was before I had a network connection to
be able to look this stuff up online.  Of course, the fate of the user
who starts Vi and can't ever lead is nowadays the stuff of memes
galore, but then, I was that user.

My solution was the first time I took advantage of the fact that Linux
was always designed to be a proper multi-user system. I used
Ctrl-Alt-f2 to open a second terminal, log in and kill the Vi process
from the second login.  Not really elegant, but very effective...


** Configuration File Structure.

The configuration file for Emacs is long and complicated and it is
likely to become much longer and more complicated as I add my own
prose to it, and enhance it as required. As this is the case, I would
like to provide structure to the file in order to help ease the
process of managing everything.

The various sections of the file should try and reflect this
structure.  This process will, in all likelihood be a work in progress
for some time. I will make this process a feature branch which can be
merged in with the repository as time goes by.

At the very highest level, the file can be grouped as follows:

- Introduction: What the files are and what they do.
- Initial Setup: Describe the intended package management approach and
  set up the repositories to be used throughout the initialisation
  process.
- Look and Feel Configuration: Modify the visual configuration of
  Emacs.
- Built-in Configuration: Use the various built-in customisations that
  are available in Emacs.
- Install and Configure Packages as required:
  - Customisations that are used everywhere in the editor.
  - Customisations for text editing in various markup languages
  - Customisations for coding in various languages.

There are some areas of overlap which could arise, but I will try and
deal with these in a suitable manner when they arise.

** Initial Set-up and Package Management.
One of the major improvements in the way that Emacs is configured has
been the addition of packages which can be installed from within the
program.  This requires one or more 'repositories' which can be
interrogated to provide a list of available software.

To obtain a list of packages enter:

M-x package-list-packages

This will pull a list of available packages, depending on the
repositories that are available.

From my reading of this page on the Emacs Wiki:

https://www.emacswiki.org/emacs/ELPA

I now know:

- ELPA stands for Emacs Lisp Package Archive
- MELPA is a self updating ELPA which pulls code from source
  repositories and builds them automatically.
- Marmalade is an ELPA which users can upload packages to, even if
  they aren't maintainers
- It is possible to generate a local version of ELPA containing all
  your installed packages. This can be handy if there are firewall
  issues preventing you downloading the packages on a company machine.

The code for configuring the repositories is the first example of a
piece of literate programming in this file, and as such it deserves a
brief comment on how it is set up.

The code block starts with a 'begin_src' command, which is followed by
information on what language is being used in the code block.

The code block contains the required number of lines, and ends with
the 'end_src' command.  If you are doing active development of a file
using literate programming paradigms you can evaluate the code block's
contents as required, usually by hitting C-c C-c.

This code block activates the built-in script code, then defines two
repository archives (gnu and melpa). Finally the repositories are
initialised which makes their contents available to the package
management process.
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (setq use-package-always-ensure t)
#+end_src

** Automated Package Installation using use-package.
Having configured repositories, there is an option for selecting
packages from the package list and installing them one by one.  This
approach works. It is also quite easy to maintain as updating packages
is simple enough (see below). The configuration for individual
packages can then be managed using the 'customize-group' option for
packages as they are added, and the code required to add packages and
configure them will then be written into init.el.  However, there is
an alternative approach, which is to use a plug-in 'use-package'. To
add a package add code to 'pull in' the package. You can then add
various lines which can, amongst other things, ensure the package is
installed, or postpone installation until the package is required
(the deferring of packages can speed the process of startup). This is
the approach I have taken.

In order to support the use of 'use-package' it needs to be
installed. This requires a line in init.el, and the code block
below. After this the use-package option is available.

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

As an extra note, as packages are installed (either via the
package-install command, or by using use-package) they are added to
the elpa subdirectory of your Emacs initialisation folder. This folder
is by far and away the biggest component of the initialisation folder
(as of 4th June 2019 it is 50Mb out of 51Mb).

** Updating Packages.

As packages are installed it becomes desirable to update them.  This
is especially the case with those packages that are in active
development, but many of the packages I use are updated at least once
a week.

The process for upgrading the installed packages is:

- M-x package-list-packages - lists the packages available. This list
  is very long. It is sorted into blocks, including the available
  packages, those deliberately installed, those that are dependencies
  and those that are built-in.
- Once the list has loaded type U (capital u). A message will appear
  at the bottom of the screen indicating how many packages are
  available for upgrading. If you choose to upgrade hit x (for
  execute). A confirmation prompt which lists the packages to be
  upgraded will be displayed. Hit y for yes to start the upgrade, or n
  for no to cancel.
- Once the upgrade has happened it often happens that a message will
  be displayed indicating that a number of packages are no longer
  required. The instructions indicate they can be removed with
  package-autoremove. After this autoremove process, restarting Emacs
  will pull in the latest version of all the plugins. This can take
  some time, so I should probably start to look at how to avoid doing
  it too often!

It may be possible to trigger these updates from the command line... I
will investigate.

*** Look and Feel Customisation.
**** Look and Feel 'Built In' Customisation.
Entries in this section modify the look and feel of Emacs using just
those configuration options which are available by default with
Emacs.  Most of these are about increasing the available real-estate
for my Emacs page and turning off unnecessary splash screens etc.

***** Appearance I: Reclaim Real-Estate.

This code block makes the following changes:

- Turn off menu bar (File Edit etc)
- Turn off tool bar (icons)
- Turn off blinking cursor
- Turn off the scroll bar
- Display the time on the modeline

#+begin_src emacs-lisp
  (menu-bar-mode 0)			; Turn off the menu bar (file, edit etc)
  (tool-bar-mode 0)			; Turn off the icons for new, save etc
  (blink-cursor-mode 0)			; Stop the cursor blinking
  (scroll-bar-mode 0)			; We don't need no scroll bar.
  (display-time-mode 1)			; Never have too many clocks.
#+end_src

***** Appearance II: Switch Off the Splash-Screen.

I know that I have just fired up Emacs, so I don't need to have the
splash screen displayed.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)	; splash screen disabled.
#+end_src

***** Appearance III: Select a Nice Font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Inconsolata Medium"
		      :height 85)		; found from experimentation.
#+end_src

***** Appearance IV: Highlight Current Line.

To help guide the eye (especially when the font is quite small!)
highlight the line where the cursor is.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)			; highlight current line.
#+end_src

***** Appearance V: Line Numbering.

It can be useful to have line numbering as the files get longer.

#+begin_src emacs-lisp
  (global-linum-mode t)			; line numbering on.
#+end_src

So far, this completes the 'built in' settings for look and feel. Time for a commit!

**** Look and Feel 'Installed' Customisation.

***** Appearance VI: Colour Theme.

First point of note: This is the first entry in my config file which
uses 'use-package' to install it.  There are a lot of colour schemes
available as packages, but I'm going to use a Cyberpunk theme for the
time being. It is largely dark, but with a nice colourfull syntax
highlighting setup.

#+begin_src emacs-lisp
  (use-package zenburn-theme)
#+end_src

***** Appearance VII: Rainbow Delimiters.

There are a couple of useful approaches that Emacs supports for
managing brackets and the like.  This is the first one.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'org-mode-hook 'rainbow-delimiters-mode)
    :config (add-hook 'prog-mode-hook 'electric-pair-mode)
    :config (add-hook 'LaTeX-mode-hook 'electric-pair-mode)
    :config (add-hook 'text-mode-hook 'electric-pair-mode)
    :config (add-hook 'org-mode-hook 'electric-pair-mode))
#+end_src

***** Appearance VIII: Doom Modeline - Pretty Modeline.

To use this package I need to install 'all-the-icons' and
'doom-modeline' and then select a theme.

#+begin_src emacs-lisp
  (use-package all-the-icons)		; Install All-The-Icons
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
  (use-package doom-themes
    :config (load-theme 'doom-molokai t))
#+end_src

***** Appearance IX: Text Displayed at Startup.

I have switched off the splash screen, which means that Emacs shows a
simple bit of text on launch (unless a file has been loaded from the
command line) about the scratch buffer. We can do better than that.

I regularly run Emacs on three machines:

- iMac Pro - Psychology
- Avantex desktop - Plant Science
- Dell Latitude E5500 laptop - Home

Emacs can select code to run on the basis of system name using a
lookup  on the variable 'system name'.  According to the variable
description, system-name is defined in 'C Source Code', but this
variable is obsolete in Emacs after version 25.1. Use (system-name)
instead...

#+begin_src emacs-lisp
  ;; ziggy-latitude - my home laptop:
  (if (string=(system-name) "ziggy-latitude")
      (setq initial-scratch-message
	    "I use Emacs, which might be thought of as a thermonuclear word processor.\n\nNeal Stephenson - \t In the Beginning... Was the Command Line"))
  ;; psychol-ford (Psychology)
  (if (string=(system-name) "psychol-ford")
      (setq initial-scratch-message
	    "'Space,' it says, 'is big. Really big. You just won't believe how vastly, hugely, mindbogglingly big it is.\nI mean, you may think it's a long way down the road to the chemist, but that's just peanuts to space.'\n\nHitch Hiker's Guide To The Galaxy\n\tDouglas Adams."))
  ;; plantsci-cowin01
  (if (string=(system-name) "plantsci-cowin01")
      (setq initial-scratch-message
	    "The most exciting phrase to hear in science, the one that heralds the most discoveries is\nnot 'Eureka!' (I have found it!) but 'That's funny...'\n\nIsaac Asimov"))
#+end_src

***** Appearance X: Minimap Mode.
The concept of the Minimap is to provide a 10,000 foot overview of
your text in a small window to the left of the main editing window.
The font size can be adjusted to make it just readable, or it can be
left so small that it is just to give you an idea of the 'shape' of
your document.

In a previous iteration of this file I have had this enabled in Org
Mode, but I found it a bit jarring, especially as I tend to dip in and
out of Org files. As this is the case I have modified the installation
code so that it doesn't include Org modes.

#+begin_src emacs-lisp
  (use-package minimap			; Install Minimap
    :config (setq minimap-major-modes '(tex-mode prog-mode))
    :config (minimap-mode 1))
#+end_src
This configuration works, but the font size can probably be fiddled with.

***** Appearance XI: Fancy Bullets for Org-mode.
The tree structure of Org-mode files is managed by using headings
identified by an appropriate number of asterisks. The 'deeper' in the
tree, the larger the number of stars. This works, but isn't hugely
pretty. Enter the org-bullets mode.

#+begin_src emacs-lisp
  (use-package org-bullets
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
***** Org-Mode Based Mind Maps.
A nice little script that can be run on any Emacs Org file, which then
turns it into a 'Mind Map'. It uses GraphViz externally to generate
the graphics so this has to be installed as well. On a Linux box this
is simple as the GraphViz software is available in the appropriate
repository.

The resultant mind map runs from left to right, whereas bespoke
mind mapping software would put the starting point in the middle and
radiate from there.

For proper mind mapping on my Linux machines I can use 'vym' (view
your mind?). There is a program (Freemind) which is good to, but I'm
currently having an issue with downloading the Java binary.
#+BEGIN_SRC emacs-lisp
;; This is an Emacs package that creates graphviz directed graphs from
;; the headings of an org file
(use-package org-mind-map
  :init
  (require 'ox-org)
  ;; Uncomment the below if 'ensure-system-packages` is installed
  ;;:ensure-system-package (gvgen . graphviz)
  :config
  ;; (setq org-mind-map-engine "dot")       ; Default. Directed Graph
  ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
  (setq org-mind-map-engine "twopi")  ; Radial Layout
  ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
  ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
  ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
  ;; (setq org-mind-map-engine "circo")  ; Circular Layout
  )
#+END_SRC
***** Pomodoro Timer
One of those 'Get Things Done' things, the Pomodoro technique takes
its name from a classic kitchen timer shaped like a tomato.  The
concept is simply that you work solidly for 25 minutes and then break
for 5 minutes, then repeat.

The pomidor plug-in for Emacs is here:

https://github.com/TatriX/pomidor

The page also links to a longer page on using the pomodoro technique.

#+BEGIN_SRC emacs-lisp
  (use-package pomidor
    :bind (("<f12>" . pomidor))
    :config (setq pomidor-sound-tick nil
		  pomidor-sound-tack nil)
    :hook (pomidor-mode . (lambda ()
			    (display-line-numbers-mode -1) ; Emacs 26.1+
			    (setq left-fringe-width 0 right-fringe-width 0)
			    (setq left-margin-width 2 right-margin-width 0)
			    ;; force fringe update
			    (set-window-buffer nil (current-buffer)))))
#+END_SRC

*** Universal Functionality.
Entries here are for functions which are not specific to banging out
text or coding. Things like git integration belong here.
**** Set Default Mode to Text.
The reason for this is to enable all the useful modes that don't
appear to want to play in fundamental mode.

#+begin_src emacs-lisp
  (setq-default major-mode 'text-mode)
#+end_src

**** Magit - Dependencies Before Installing Magit.
***** Dash
#+begin_src emacs-lisp
  (use-package dash)					;
#+end_src
***** Diminish

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

***** Magit-pop-up
#+begin_src emacs-lisp
  (use-package magit-popup)
#+end_src
***** With Editor
#+begin_src emacs-lisp
  (use-package with-editor)
#+end_src
***** ghub (GitHub integration)
#+begin_src emacs-lisp
  (use-package ghub)
#+end_src

**** Magit - The Program Itself.
#+begin_src emacs-lisp
  (use-package magit
    :config (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

**** Magit - Documentation.

#+begin_src emacs-lisp
  (with-eval-after-load 'info
    (info-initialize)
    (add-to-list 'Info-directory-list
		 "~/.emacs.d/elpa/magit-2.90.1/dir/"))
#+end_src

**** Backup Configuration.

By default Emacs creates a simple backup of files when editing. These
share the same name but with an appended tilde (~). This is okay, but,
again, we can do better.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.Backups/"))) ; hidden backup folder
  (setq delete-old-versions t)                              ; delete old versions silently
  (setq kept-new-versions 6)                                ; no. of new versions to keep
  (setq kept-old-versions 2)                                ; no. of old versions to keep.
  (setq version-control t)                                  ; create numbered backups
  (setq vc-make-backup-files t)                             ; backup even version controlled files.
  (setq auto-save-file-name-transforms '((".*" "~/.Backups/" t))) ; uniquify saved name
#+end_src

***** TODO more information on the way the backup works.
This should now generate backup files in a hidden directory where they
can be retrieved if required.

**** History Configuration - Sacha Chua's C3F Configuration.
As noted in the section on backing up, modern computers have
relatively large hard drives, the sort of thing that just isn't going
to get filled up with text files, however hard you type. As this is
the case it is possible to become a little bit of a hoarder and
collect everything that you write and edit if you want (I don't want
to go that far, but keeping the important stuff is good).

In this article:

https://www.wisdomandwonder.com/wp-content/uploads/2014/03/C3F.html

Sacha Chua outlines her approach to 'C3F' (Creation and Conservation
of Computer Files).

#+begin_src emacs-lisp
  (setq savehist-file "~/.Backups/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
	'(kill-ring
	  search-ring
	  regexp-search-ring))
#+end_src

This configuration should save a history in a file in the same backup
folder used above. This is a nice place to put it as it is hidden from
day to day use.

**** White Space Trimming.
Trigger the 'white space trimming function' whenever the file is saved.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
**** Answering yes/no Questions with y/n.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
**** Word Wrapping.
***** [TODO] Add appropriate text description for this.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)		;word
  (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)		;wrap
  (add-hook 'latex-mode-hook 'turn-on-auto-fill)		;in these
  (add-hook 'org-mode-hook 'turn-on-auto-fill)		;various
  (add-hook 'emacs-lisp-mode-hook 'turn-on-auto-fill)	;text
  (add-hook 'fundamental-mode-hook 'turn-on-auto-fill)	;modes.
  (add-hook 'prog-mode-hook 'turn-on-auto-fill)		;
#+end_src
**** Time Stamping Files.
There are many ways of tracking who is responsibe for changes to
various files on your system. Git includes logging which can be used
to record who has made changes to the files under version
control. However, for files that aren't necessarily under version
control it is nice to have a time stamp which indicates when and by
whom a file is saved. This is done by using a simple time stamp. This
requires a line like this:

- Time-stamp: " "

or

- Time-stamp: < >

in the first eight lines of the file. When the file is saved the time
stamp and username is placed in between the delimiters (NB. A space is
required).

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'time-stamp) ; run function before saving file
  (setq time-stamp-pattern nil)		 ; no unusual pattern used for the time stamp. See notes
#+end_src

Looking at this page: https://www.emacswiki.org/emacs/TimeStamp

it is possible to modify the format of the time stamp as required.
The major changes are:

- where the time stamp has to appear. By default it is in the first 8
  lines of the file, but by using a negative number in the format
  configuration the time stamp can be located at the end of the file.

- what time and date information and user info, in what order is
  used. By default the order is YYYY-MM-DD HH:MM:SS username.

The advice on the Emacs wiki page is to not change the configuration
unless you really need to as it may cause problems if you are
collaborating on files which have been edited on other machines and
the expectation is that the time-stamp will be in a specific location.

**** Abbreviations - Saving You Typing.
There are two types of abbreviation available in Emacs.

***** Dynamic Abbreviations.

Dynamic abbreviation functionality gives a sort of auto-complete
functionality to writing text. For instance, assume you are writing a
long paper on the use of the Weissenberg Rheogoniometer. You *really*
don't want to be typing that too often. I know, I worked with one when
I was a researcher, and typing it for reports was he bain of my life!

Anyway, you have written it once near the top of your document and you
are now moving on. You come to a place where you need to type it
again. Instead of typing the whole thing type the first few letters:

Wei

and then type M-/

and with any luck you will find the text expanded to the full first
word (Weissenberg).

Weissenberg

then add the start of the second word:

Rhe and type M-/ again to expand it to the full text Rheogoniometer.

So you can type Weissenberg Rheogoniometer with three characters, M-/
ad two characters and M-/. Sweet!

This is convenient for terms which you don't use very often, and which
you may use repeatedly in a single file. I use it on the DHCP server
(Arthur) when I am adding computers to the network. A line in the
configuration files looks something like this:

host computername { hardware ethernet 00:00:00:00:00:00; fixed-address
172.29.xx.xxx } # comment

When entering values it can help avoid issues with the file using the
dabbrev mode to expand hardware, ethernet and fixed-address text, but
it can also be useful when you are adding new ip addresses as the
dabbrev will complete the address using the previous one in the list
so you just need to increment the last digit in the line.

***** Abbrev Functionality.
The alternative to dynamic abbreviations is to create abbreviations
and have them automatically expand when required.

My main use of this behaviour comes about because I use Emacs as an
external editor for Evolution so that I can write my emails using
Emacs and then send them in Evolution (required because I have to deal
with MS Exchange).

As I am using Emacs and I have access to the abbreviation mode I use
abbreviations for some of the common phrases I use in emails. These
include:

tia - thanks in anticipation

bw - best wishes

hth - hope that helps

I'm looking to create an abbreviation that unpacks to a code block
setup, but I may have to employ something like 'yasnippet' instead.

#+begin_src emacs-lisp
  (setq-default abbrev-mode t)		; turn on abbrev mode
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs") ;
#+end_src

I was going to put the abbreviations file in .Backup, but I think it
is probably better to put it into .emacs.d and to place it is version
control so that it can be shared between here and home.

The big advantage of the automatic abbreviations is that the expansion
doesn't require intervention. Just type your abbreviation and the
expansion is automatic.

The disadvantage is pretty much the same. If you find yourself having
to type a string which is also one of your abbreviations then it will
auto-expand regardless. To fix an expanded abbreviation that you don't
want expanded type M-x unexpand-abbrev.

To add abbreviations type the work you want to automatically expand:

Rheogoniometer

with the cursor at the end of the word type:

C-x a i g (for global abbreviation - that is, all modes)

C-x a i l (for local abbreviation - just in the local mode)

To add multiple words you need to use the C-u no. C-x etc.

**** SavePlace - Save your location for next time.
This is one of those functions that you don't realise you really want
until it isn't there. For instance, when I open this file at the
moment it always opens as a single headline 'Config.org: A
configuration file for emacs'. I can navigate quickly to where I want
to be by using the TAB key to expand or shrink the appropriate
subheadings, but I don't end up where I was last time by default. And
in a file which wasn't an org file with lots of headings to expand or
hide, it would be more of a pain. For instance, this file is already
over 450 lines long, moving through it gets tedious.

The function is simple enough. It saves what line you were on for
every file you  open and edit. The information is saved in a file
called '.places' which I am going to place in my .Backup folder.

#+begin_src emacs-lisp
  (save-place-mode 1)
  (setq save-place-file "~/.Backups/.places")
#+end_src

It appears that this is now built-in, so trying the information found
on the wiki:

https://www.emacswiki.org/emacs/SavePlace

**** Native Indentation for Org-Mode Source Blocks.
Obviously coding using Org-mode code blocks is a great way to
implement the literate programming paradigm. However, when you insert
code, by default, the tab key doesn't indent the code in the 'normal'
way. This isn't too much of a problem in Lisp code (though it does
deserve fixing), but in other languages it can be a real problem.

Stackflow had this question and answer:

https://stackoverflow.com/questions/15773354/indent-code-in-org-babel-src-blocks

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

**** Word of the Day.
#+begin_src emacs-lisp
    (use-package wotd)
#+end_src
**** User Information.
I'm not sure what this does right now, but it has been in a previous
version of this file, so I'm going to include it now, and investigate
later.

#+begin_src emacs-lisp
  (setq user-full-name "Richard Fieldsend")
  (setq user-mail-addrss "richardfieldsend@gmail.com")
#+end_src
**** Emacs Server.

One of the things some users obsess over with Emacs is start-up
times. One approach to dealing with this is to start Emacs either as a
daemon:

- emacs --daemon

or as a server (run start server from within the program).

This can be done within the configuration file, but you should only
start a server if none is already running.

#+begin_src emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+end_src
Once a server is running you can start more Emacs windows using the
scrip 'ec' which I have saved in the ~/bin folder. This launches new
windows very quickly indeed.

You can close emacsclient windows using C-x 5 0

This approach leaves the server running so that the next Emacs window
opens quickly.

**** Helm
Helm is another of those Emacs plug-ins which many people consider
almost indispensable. It is quite subtle, but it definitely does speed
access to certain functions. But I think I need to experiment with it
more.

This configuration installs helm, then activates it. It when replaces
'M-x' with 'helm-M-x' which provides the search functionality of Emacs
functions. This means you can type terms that are part of the function
you are after and the list will dynamically reflect the search.

For instance, to list the available packages:

M-x pack list

will open a window which lists recent matching commands followed by
commands that match, but aren't in the command history. I have
recently used 'package-list-packages', so this was at the top of the
list and ready for use (just hit return), but the other options could
be selected by using C-n/C-p.

A similar takeover of the buffer functionality is enabled. Hit C-x b
and a list of buffers will be displayed. Type letters and a filtering
search begins. Having reduced the number of available matches you can
select the one you want using C-n/C-p and then hitting return.
#+begin_src emacs-lisp
  (use-package helm
    :diminish helm-mode
    :init
    :config (require 'helm-config)
    :config (helm-mode 1)
    :config (global-set-key (kbd "C-c h") 'helm-command-prefix)
    :config (global-unset-key (kbd "C-x c"))
    :config (global-set-key (kbd "M-x") #'helm-M-x)
    :config (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    :config (global-set-key (kbd "C-x C-f") #'helm-find-files))
#+end_src

Friday 23rd August 2019

Added command in the above 'diminish' as per Sacha Chua's Emacs
initialisation file.

This doesn't appear to do anything right now, so I will add the
diminish package.

**** Frame title - Set A Better Title
Emacs does a lot of stuff to tell you what file you are editing, and
what mode you are using. This information is usually available on the
modeline (see the section on modeline customisation...), but it is
nice to have it available in other locations as well. This code block
configures the text at the top of the frame. I have set it up to
display:

Emacs - Buffer: <buffername> : File: <filename including path> : Mode:
<major mode in use>.

I may trim out either the buffer name or filename at some point, but
this is how it is for the time being.

#+begin_src emacs-lisp
(setq frame-title-format '("Emacs - Buffer: %b : File: %f : Mode: %m"))
#+end_src
**** Bookmarks.
Bookmarks can be a useful way of getting back to a file you need to be
able to visit again. Emacs has a built-in bookmark mode which supports
annotations for the bookmarks.

The commands for using bookmarks are:

- 'C-x r m' - set bookmark at the current location
- 'C-x r b' - jump to a bookmark
- 'C-x r l' - list available bookmarks.

The code below changes the location of the bookmark file so that it is
stored in my Dropbox. That way I can relocate files on any machine
(though I need to check what will happen if I try and follow a
bookmark to a file which doesn't currently exist).

#+begin_src emacs-lisp
  (set 'bookmark-default-file "~/Dropbox/.bookmarks")
#+end_src
**** Multiple Cursors
Do the same edit on multiple lines, or at multiple points in a
file. It appears to work well in html, but I can't get it working in
Org-mode as yet (or even in the programming blocks). I need to
experiment with this, because when it works it is really cool.

#+begin_src emacs-lisp
  (use-package package
    :ensure t)
  (use-package multiple-cursors
    :config (global-set-key (kbd "C-c m c") 'mc/edit-lines)
    :config (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    :config (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    :config (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src
**** Helm Spotify Plus
If you are deep in the process of using Emacs you might not want to go
away from Emacs to choose your music tracks. This is where the
'helm-spotify-plus' plug-in comes in.

The code block loads the plug-in and then maps the keys as follows:

- C-c s s - helm-spotify-plus
- C-c s f - next track
- C-c s b - back to the beginning of the track
- C-c s p - play
- C-c s g - pause (C-g is a popular Emacs quit combination)

To start playing a track C-c s s will ask for the track to play. Enter
a search term and a list of tracks will be returned. Select the track
you want and hit return.

The search provided can be free text, artist, track or market and any
combination of these.

- chumbawamba - no identifier the search is free text
- a:chumbawamba - artist search
- t:timebomb - track search
- a:bragg t:levi - both artist and track
- a:bragg m:US - artist and the market

If the list is extensive then select a result and hit tab to get a
list of possible actions. These include things like listening to the
album.

I've been experimenting with this functionality while writing this
prose, and it is rather marvellous.  The only other thing I would want
is the ability to search for a play list.

#+BEGIN_SRC emacs-lisp
  (use-package helm-spotify-plus
    :config (global-set-key (kbd "C-c s s") 'helm-spotify-plus)
    :config (global-set-key (kbd "C-c s f") 'helm-spotify-plus-next)
    :config (global-set-key (kbd "C-c s b") 'helm-spotify-plus-previous)
    :config (global-set-key (kbd "C-c s p") 'helm-spotify-plus-play)
    :config (global-set-key (kbd "C-c s g") 'helm-spotify-plus-pause))
#+END_SRC
*** Programming Customisation.
**** C/C++.
#+BEGIN_SRC emacs-lisp
  (use-package ecb
    :config (require 'ecb))
#+END_SRC
**** Python.
Python is one of the most popular languages nowadays. It is easy to
learn, yet powerful. It isn't the fastest thing available, but given
how fast computers are nowadays, most people don't end up writing
programs that take any measurable time, so Python is fast enough!

This page:

https://realpython.com/emacs-the-best-python-editor/

is being used as the source of my configuration, at least initially.

#+begin_src emacs-lisp
  (use-package elpy
    :config (elpy-enable)
    :config (setq python-shell-interpreter "python" python-shell-interpreter-args "-i"))
  (use-package flycheck
    :config (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
  (use-package py-autopep8
    :config (require 'py-autopep8)
    :config (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
  (use-package ein)
#+end_src

**** Clojure.
Activate Clojure mode ready to code in Clojure. This is intended to
follow the instructions and information in 'Clojure for The Brave and
The True' eBook.

# installing Clojure mode and Cider.
#+begin_src emacs-lisp
				  (use-package clojure-mode		; Install clojure-mode
				    :mode (("\\.clj\\'" . clojure-mode)
					   ("\\.edn\\'" . clojure-mode))
				    :init
				    (add-hook 'clojure-mode-hook #'paredit-mode))
				  (use-package clojure-mode-extra-font-locking) ; pretty printing
				  (use-package cider			; cider install
				    :defer t
				    :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
				    :diminish subword-mode
				    :config
				    (setq nrepl-log-messages t
					  cider-repl-display-in-current-window t
					  cider-repl-use-clojure-font-lock t
					  cider-prompt-save-file-on-load 'always-save
					  cider-font-lock-dynamically '(macro core function var)
					  nrepl-hide-special-buffers t
					  cider-overlays-use-font-lock t)
				    (cider-repl-toggle-pretty-printing))
				  (use-package projectile)
				  (use-package tagedit)
				  (use-package paredit)
#+end_src

This code block installs Clojure mode, font-locking (syntax colouring
for Clojure), Cider, Projectile and tagedit. These look like the main
ones of concern in the Clojure book, but others may be added later.

Below Is Some Text Used As Part Of The Book's Demonstration On Using
Key Bindings And Cursor movement.

If you were a pirate, you know what would be the one thing that would
really make you mad? Treasure chests with no handles. How the hell are
you supposed to carry it?!

The head of a child can say it all, especially the mouth part of the
head.

To me, boxing is like a ballet, except there's no music, no
Treasure, and the dancers hit each other.

*** Text Editing.
**** WriteRoom Mode.
Linux has a nice distraction free text writing application called
Focus Writer. It looks pretty, does away with page furniture and even
has a word count function that you can tie into a "word target of the
day" function. But it doesn't have all the Emacs goodies that I have
grown to love!

WriteRoom provides a full screen text editing function within Emacs,
pushing the Emacs to full screen and then placing your text in the
middle of the page. It is nice, if simplistic.

#+begin_src emacs-lisp
  (use-package writeroom-mode)		; Install and enable writeroom mode.
#+end_src

***** [TODO] Look at combining writeroom mode and LaTeX word count
**** HTML
Apparently Emmet Mode can help edit html. This is an experiment in
that.
#+begin_src emacs-lisp
  (use-package emmet-mode
    :config (add-hook 'html-mode-hook 'emmet-mode)
    :config (add-hook 'css-mode-hook 'emmet-mode))
#+end_src

(add-to-list 'load-path "~/Emacs/emmet/")
   (require 'emmet-mode)
   (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
   (add-hook 'html-mode-hook 'emmet-mode)
   (add-hook 'css-mode-hook  'emmet-mode

**** LaTeX
***** Introducing LaTeX
******* [TODO] Write an introduction to LaTeX.

***** AucTeX - LaTeX Editing Plug-in for Emacs.
AucTeX provides lots of support for writing LaTeX documents in
Emacs. This includes things like helping manage multi-part documents
(LaTeX makes long documents easier to manage by breaking them down
into bite size parts, but allowing interconnectivity etc). I will
write more about what extras it provides at some point.

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config (setq TeX-auto-save t)
    :config (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    :config (add-hook 'latex-mode-hook 'turn-onreftex)
    :config (setq reftex-plug-into-AUCTeX t)
    :config (setq-default TeX-master nil)
    :config (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    :config (add-hook 'latex-mode-hook 'LaTeX-math-mode)
    :config (setq TeX-fold-mode 1)
    :config (setq TeX-parse-self t)
    :config (setq TeX-electric-escape t)
    :config (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
    :config (add-hook 'latex-mode-hook 'outline-minor-mode))
#+end_src

***** eBib - Bibliography Management in Emacs.

#+begin_src emacs-lisp
  (use-package ebib
    :config (global-set-key "\C-cb" 'ebib)
    :config (setq ebib-bib-search-dirs '("~/bibliographies/"))
    :config (setq ebib-file-search-dirs '("~/bibliographies/"))
    :config (setq ebib-default-entry-type 'Book)
    :config (setq ebib-preload-bib-files
		  '("kindle.bib" "paperbacks.bib" "hardbacks.bib" "audiobooks.bib"))
    :config (setq ebib-keywords-field-keep-sorted t)
    :config (setq ebib-keywords-file "~/bibliographies/keywordslist.txt")
    :config (setq ebib-keywords-use-only-file t)
    :config (setq ebib-reading-list-file "~/bibliographies/ToReadList.org")
    :config (setq ebib-use-timestamp t))
#+end_src
**** Spell Checking
***** [TODO] info about this setup, but simple enough:

- use ispell
- set language to British English
- activate flyspell (on the fly spellchecking) for the various modes.

#+begin_src emacs-lisp
  (require 'ispell)
  (setq ispell-dictionary "british")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'latex-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'fundamental-mode-hook 'flyspell-mode)
#+end_src

**** Grammar/Lint Checking

This is derived from a Reddit post which pointed to this page:

https://www.macs.hw.ac.uk/~rs46/posts/2018-12-29-textlint-flycheck.html

#+begin_src emacs-lisp
  (require 'flycheck)			; already installed in the Elpy configuration
  (flycheck-define-checker textlint
    "A linter for textlint."
    :command ("npx" "textlint"
	      "--config" "/home/rob/.emacs.d/.textlintrc"
	      "--format" "unix"
	      "--rule" "write-good"
	      "--rule" "no-start-duplicated-conjunction"
	      "--rule" "max-comma"
	      "--rule" "terminology"
	      "--rule" "period-in-list-item"
	      "--rule" "abbr-within-parentheses"
	      "--rule" "alex"
	      "--rule" "common-misspellings"
	      "--rule" "en-max-word-count"
	      "--rule" "diacritics"
	      "--rule" "stop-words"
	      "--plugin"
	      (eval
	       (if (derived-mode-p 'tex-mode)
		   "latex"
		 "@textlint/text"))
	      source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
	      (message (one-or-more not-newline)
		       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
	      line-end))
    :modes (text-mode latex-mode org-mode markdown-mode)
    )
  (add-to-list 'flycheck-checkers 'textlint)
#+end_src
**** Lorem Ipsum - Adding Test Text.
When you are testing any sort of text creation it is useful to be able
to add a lot of text which can be nonsense, but which looks like real
text.

#+begin_src emacs-lisp
    (use-package lorem-ipsum)
#+end_src
**** Big Brother Database (BBDB)

#+begin_src emacs-lisp
    (use-package bbdb
      :config (bbdb-initialize)
      :init (setq bbdb-file "~/Dropbox/bbdb"))
#+end_src
**** Diary Manager.
This is an Emacs add-on which plugs into a Python powered diary
manager. See the instructions here:

https://github.com/raxod502/diary-manager

#+begin_src emacs-lisp
    (use-package diary-manager
      :config (set 'diary-manager-location "~/Dropbox/.diary"))
#+end_src
**** Enable editing Firefox text areas in Emacs.
I'm really not sure how long I will stick with this
functionality. Essentially the concept is to fire up an Emacs frame
whenever you are entering text in a web page so that you get to use
the full glory of your finely honed Emacs configuration.

In some ways this makes a lot of sense. I am deliberately making an
effort to use the keyboard more, especially when it comes to moving
around. *And* I am trying to avoid using the arrow keys, even though
they are on the keyboard. I should be using Emacs movement key
combinations as much as possible.
#+BEGIN_SRC emacs-lisp
    (use-package edit-server
      :config (edit-server-start))
#+END_SRC
**** Typing of Emacs - A typing tutor
#+begin_src emacs-lisp
  (use-package typing
  :init
  (autoload 'typing-of-emacs "typing nit t")
    :config
    (progn
      (setq toe-starting-length 3)
      (setq toe-starting-time-per-word 10)
      (setq toe-max-length 20)))
#+end_src
