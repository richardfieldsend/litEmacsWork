* Config.org: A configuration file for Emacs.
# Time-stamp: "2019-05-22 14:49:38 richard"
** [TODO] Introduction.
I do like to fiddle around with Emacs. But the infinitely extensible
editor invites the process of fiddling around.

** [TODO] Suggested Structure for config.org.
*** Set up the MELPA Repository.

**** [TODO] Information about packages, including installing and updating.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

#+begin_src emacs-lisp
  (require 'use-package)
#+end_src

*** Look and Feel Customisation.
**** Look and Feel 'Built In' Customisation.
Entries in this section modify the look and feel of Emacs using just
those configuration options which are available by default with
Emacs.  Most of these are about increasing the available real-estate
for my Emacs page and turning off unnecessary splash screens etc.

***** Appearance I: Reclaim Real-Estate.

This code block makes the following changes:

- Turn off menu bar (File Edit etc)
- Turn off tool bar (icons)
- Turn off blinking cursor
- Turn off the scroll bar
- Display the time on the modeline

#+begin_src emacs-lisp
  (menu-bar-mode 0)			; Turn off the menu bar (file, edit etc)
  (tool-bar-mode 0)			; Turn off the icons for new, save etc
  (blink-cursor-mode 0)			; Stop the cursor blinking
  (scroll-bar-mode 0)			; We don't need no scroll bar.
  (display-time-mode 1)			; Never have too many clocks.
#+end_src

***** Appearance II: Switch Off the Splash-Screen.

I know that I have just fired up Emacs, so I don't need to have the
splash screen displayed.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)	; splash screen disabled.
#+end_src

***** Appearance III: Select a Nice Font.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "Inconsolata Medium"
		      :height 85)		; found from experimentation.
#+end_src

***** Appearance IV: Highlight Current Line.

To help guide the eye (especially when the font is quite small!)
highlight the line where the cursor is.

#+begin_src emacs-lisp
  (global-hl-line-mode 1)			; highlight current line.
#+end_src

***** Appearance V: Line Numbering.

It can be useful to have line numbering as the files get longer.

#+begin_src emacs-lisp
  (global-linum-mode t)			; line numbering on.
#+end_src

So far, this completes the 'built in' settings for look and feel. Time for a commit!

**** Look and Feel 'Installed' Customisation.

***** Appearance VI: Colour Theme.

First point of note: This is the first entry in my config file which
uses 'use-package' to install it.  There are a lot of colour schemes
available as packages, but I'm going to use a Cyberpunk theme for the
time being. It is largely dark, but with a nice colourfull syntax
highlighting setup.

#+begin_src emacs-lisp
  (use-package cyberpunk-theme
  :ensure t)
#+end_src

***** Appearance VII: Rainbow Delimiters.

There are a couple of useful approaches that Emacs supports for
managing brackets and the like.  This is the first one.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
  :config (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  :config (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode)
  :config (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
  :config (add-hook 'org-mode-hook 'rainbow-delimiters-mode))
  :config (add-hook 'prog-mode-hook 'electric-pair-mode)
  :config (add-hook 'LaTeX-mode-hook 'electric-pair-mode)
  :config (add-hook 'text-mode-hook 'electric-pair-mode)
  :config (add-hook 'org-mode-hook 'electric-pair-mode)
#+end_src

***** Appearance VIII: Doom Modeline - Pretty Modeline.

To use this package I need to install 'all-the-icons' and
'doom-modeline' and then select a theme.

#+begin_src emacs-lisp
  (use-package all-the-icons)		; Install All-The-Icons
  (use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode))
  (use-package doom-themes
  :ensure t
  :config (load-theme 'doom-dracula t))
#+end_src

***** Appearance IX: Text Displayed at Startup.

I have switched off the splash screen, which means that Emacs shows a
simple bit of text on launch (unless a file has been loaded from the
command line) about the scratch buffer. We can do better than that.

I regularly run Emacs on three machines:

- iMac Pro - Psychology
- Avantex desktop - Plant Science
- Dell Latitude E5500 laptop - Home

Emacs can select code to run on the basis of system name using a
lookup  on the variable 'system name'.  According to the variable
description, system-name is defined in 'C Source Code', but this
variable is obsolete in Emacs after version 25.1. Use (system-name)
instead...

#+begin_src emacs-lisp
  ;; ziggy-latitude - my home laptop:
  (if (string=(system-name) "ziggy-latitude")
  (setq initial-scratch-message
  "I use Emacs, which might be thought of as a thermonuclear word processor.\n\nNeal Stephenson - \t In the Beginning... Was the Command Line"))
  ;; psychol-ford (Psychology)
  (if (string=(system-name) "psychol-ford")
  (setq initial-scratch-message
  "'Space,' it says, 'is big. Really big. You just won't believe how vastly, hugely, mindbogglingly big it is.\nI mean, you may think it's a long way down the road to the chemist, but that's just peanuts to space.'\n\nHitch Hiker's Guide To The Galaxy\n\tDouglas Adams."))
  ;; plantsci-cowin01
  (if (string=(system-name) "plantsci-cowin01")
  (setq initial-scratch-message
  "The most exciting phrase to hear in science, the one that heralds the most discoveries is\nnot 'Eureka!' (I have found it!) but 'That's funny...'\n\nIsaac Asimov"))
#+end_src

***** Appearance X: Minimap Mode.
The concept of the Minimap is to provide a 10,000 foot overview of
your text in a small window to the left of the main editing window.
The font size can be adjusted to make it just readable, or it can be
left so small that it is just to give you an idea of the 'shape' of
your document.

In a previous iteration of this file I have had this enabled in Org
Mode, but I found it a bit jarring, especially as I tend to dip in and
out of Org files. As this is the case I have modified the installation
code so that it doesn't include Org modes.

#+begin_src emacs-lisp
  (use-package minimap			; Install Minimap
  :ensure t
  :config (setq minimap-major-modes '(tex-mode prog-mode))
  :config (minimap-mode 1))
#+end_src
This configuration works, but the font size can probably be fiddled with.

*** Universal Functionality.
Entries here are for functions which are not specific to banging out
text or coding. Things like git integration belong here.
**** Magit - Dependencies Before Installing Magit.
***** Dash
#+begin_src emacs-lisp
  (use-package dash
  :ensure t)					;
#+end_src

***** Magit-pop-up
#+begin_src emacs-lisp
  (use-package magit-popup
  :ensure t)
#+end_src
***** With Editor
#+begin_src emacs-lisp
  (use-package with-editor
  :ensure t)
#+end_src
***** ghub (GitHub integration)
#+begin_src emacs-lisp
  (use-package ghub
  :ensure t)
#+end_src

**** Magit - The Program Itself.
#+begin_src emacs-lisp
(use-package magit
:ensure t
:config (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

**** Magit - Documentation.

#+begin_src emacs-lisp
(with-eval-after-load 'info
(info-initialize)
(add-to-list 'Info-directory-list
"~/.emacs.d/elpa/magit-2.90.1/dir/"))
#+end_src

**** Backup Configuration.

By default Emacs creates a simple backup of files when editing. These
share the same name but with an appended tilde (~). This is okay, but,
again, we can do better.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.Backups/"))) ; hidden backup folder
  (setq delete-old-versions t)                              ; delete old versions silently
  (setq kept-new-versions 6)                                ; no. of new versions to keep
  (setq kept-old-versions 2)                                ; no. of old versions to keep.
  (setq version-control t)                                  ; create numbered backups
  (setq vc-make-backup-files t)                             ; backup even version controlled files.
  (setq auto-save-file-name-transforms '((".*" "~/.Backups/" t))) ; uniquify saved name
#+end_src

***** TODO more information on the way the backup works.
This should now generate backup files in a hidden directory where they
can be retrieved if required.

**** White Space Trimming.
Trigger the 'white space trimming function' whenever the file is saved.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
**** Answering yes/no Questions with y/n.
#+begin_src emacs-lisp
  (fset 'yes-or-no 'y-or-n-p)
#+end_src
**** Word Wrapping.
***** [TODO] Add appropriate text description for this.
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)		;word
  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)		;wrap
  (add-hook 'latex-mode-hook 'auto-fill-mode)		;in these
  (add-hook 'org-mode-hook 'auto-fill-mode)		;various
  (add-hook 'emacs-lisp-mode-hook 'auto-fill-mode)	;text
  (add-hook 'fundamental-mode-hook 'auto-fill-mode)	;modes.
  (add-hook 'prog-mode-hook 'auto-fill-mode)		;
#+end_src
**** Time Stamping Files.
There are many ways of tracking who is responsibe for changes to
various files on your system. Git includes logging which can be used
to record who has made changes to the files under version
control. However, for files that aren't necessarily under version
control it is nice to have a time stamp which indicates when and by
whom a file is saved. This is done by using a simple time stamp. This
requires a line like this:

- Time-stamp: " "

or

- Time-stamp: < >

in the first eight lines of the file. When the file is saved the time
stamp and username is placed in between the delimiters (NB. A space is
required).

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'time-stamp) ; run function before saving file
  (setq time-stamp-pattern nil)		 ; no unusual pattern used for the time stamp. See notes
#+end_src

Looking at this page: https://www.emacswiki.org/emacs/TimeStamp

it is possible to modify the format of the time stamp as required.
The major changes are:

- where the time stamp has to appear. By default it is in the first 8
  lines of the file, but by using a negative number in the format
  configuration the time stamp can be located at the end of the file.

- what time and date information and user info, in what order is
  used. By default the order is YYYY-MM-DD HH:MM:SS username.

The advice on the Emacs wiki page is to not change the configuration
unless you really need to as it may cause problems if you are
collaborating on files which have been edited on other machines and
the expectation is that the time-stamp will be in a specific location.

*** Programming Customisation.
**** C/C++.
**** Python.
**** Clojure.
*** Text Editing.
**** WriteRoom Mode.
Linux has a nice distraction free text writing application called
Focus Writer. It looks pretty, does away with page furniture and even
has a word count function that you can tie into a "word target of the
day" function. But it doesn't have all the Emacs goodies that I have
grown to love!

WriteRoom provides a full screen text editing function within Emacs,
pushing the Emacs to full screen and then placing your text in the
middle of the page. It is nice, if simplistic.

#+begin_src emacs-lisp
  (use-package writeroom-mode		; Install and enable writeroom mode.
  :ensure t)
#+end_src

***** [TODO] Look at combining writeroom mode and LaTeX word count
**** HTML
**** LaTeX
**** Spell Checking
**** Grammar/Lint Checking
